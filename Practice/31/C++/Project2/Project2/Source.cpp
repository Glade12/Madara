#include <iostream>
#include <vector>
#include <fstream>
#include <string>

std::ostream& operator << (std::ostream& o, const std::vector<int>&v) {
	std::string s;
	o << v.size() << "   " << '|';
	for (int i = 0; i < v.size(); i++) {
		const int* ptr = &v[i];
		o << ptr << " ";
	}
	o << std::endl;
	return o;
}

/*Вопрос 1 
Адреса первых элементов массива рахные, т.к. при вызове оператора << вектор копируеться в новые раздел памяти. 
Также все элементы располагаються друг за другом, это можно увидеть по одинаковому началу. 
*/
/*Вопрос 2
Вектор из 25 элементов, может не поместиться в выделенную память для вектора из 15 эдементов, вектор будет перемещен
в новый раздел памяти, а нулевой элемент скорее всего не измениться
*/
/*Вопрос 3
Адреса чисел остаються неихменными, так как метод pop_back() просто уменьшает 
размер вектора, и нет необходимости для выделяния нового раздела памяти.
*/
/*Вопрос 4
Результаты отличаються, т.к. во втором случае выделяться новый раздел памяти для копии вектора.
*/

int main() {
	std::string y;
	std::vector<int> b;
	std::ofstream in;
	in.open("data.txt");
	for (int i = 0; i < 64; i++) {
		b.push_back(1);
		std::cout << b;
		in << b;
		
	}
	for (int i = 64; i > 1; i--) {
		b.pop_back();
		in << b;
		
	}
	in.close();
}

